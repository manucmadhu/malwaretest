from flask import Flask, request, jsonify, render_template
from werkzeug.utils import secure_filename
import os
import sqlite3
from static_analysis import extract_pe_info
import filetype

app = Flask(__name__)

# Set the upload folder
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure the directory exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

DATABASE = './malware_analysis.db'

ALLOWED_EXTENSIONS = {'exe', 'dll', 'docx', 'pdf', 'jpg', 'png'}

def allowed_file(filename):
    if '.' not in filename:
        return False
    file_ext = filename.rsplit('.', 1)[1].lower()
    return file_ext in ALLOWED_EXTENSIONS

def init_db():
    with sqlite3.connect(DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS analysis_results (
                            id INTEGER PRIMARY KEY,
                            filename TEXT,
                            md5 TEXT,
                            sha256 TEXT,
                            pe_info TEXT,
                            dynamic_info TEXT
                        )''')

def is_malware(pe_info):
    # Example of simple heuristic rules (you can adjust as per your analysis)
    if pe_info.get('number_of_sections', 0) > 10:
        return 'malware'
    if pe_info.get('entry_point', 0) > 100000:
        return 'malware'
    # Add more rules as needed
    return 'safe'

def delete_file(file_path):
    try:
        os.remove(file_path)
        print(f"File '{file_path}' deleted successfully.")
    except OSError as e:
        print(f"Error deleting file '{file_path}': {e}")

@app.route('/')
def index():
    return render_template('newindex.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"})

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"})

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        try:
            file.save(file_path)
        except OSError as e:
            return jsonify({"error": f"File save error: {e}"})

        # Determine file type using filetype library
        file_info = filetype.guess(file_path)

        if file_info is None:
            return jsonify({"error": "Cannot determine file type"})

        # Perform analysis based on file type
        if file_info.extension in {'exe', 'dll'}:
            pe_info = extract_pe_info(file_path)
            result = is_malware(pe_info)
        else:
            result = 'safe'  # Default to safe for other file types

        delete_file(file_path)

        if result == 'malware':
            return render_template('malware.html')
        else:
            return render_template('safe.html')

    return jsonify({"error": "Invalid file"})

@app.route('/results', methods=['GET'])
def get_results():
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.execute('SELECT * FROM analysis_results')
        results = cursor.fetchall()

    return jsonify(results)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
