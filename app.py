from flask import Flask, request, jsonify, render_template
from static_analysis import extract_pe_info
import dynamic_analysis
from werkzeug.utils import secure_filename
import sqlite3
import os
import pefile

app = Flask(__name__)
# Set the upload folder
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'exe'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure the directory exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

DATABASE = './malware_analysis.db'
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
def init_db():
    with sqlite3.connect(DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS analysis_results (
                            id INTEGER PRIMARY KEY,
                            filename TEXT,
                            md5 TEXT,
                            sha256 TEXT,
                            pe_info TEXT,
                            dynamic_info TEXT
                        )''')

def _pe_info(file_path):
    try:
        pe = pefile.PE(file_path)
        return extract_pe_info(pe)
    except Exception as e:
        return {'error': str(e)}

@app.route('/')
def index():
    return render_template('newindex.html')
def is_malware(pe_info):
    # Simple heuristic rules
    if pe_info['number_of_sections'] > 10:
        return render_template('notsafe.html')
    if pe_info['entry_point'] > 100000:
        return render_template('notsafe.html')
    # Add more rules as needed
    return render_template('safe.html')

# 
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"})
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"})
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        try:
            file.save(file_path)
        except OSError as e:
            return jsonify({"error": f"File save error: {e}"})
        
        pe_info = extract_pe_info(file_path)
        
        result = is_malware(pe_info)
        
        if result == "malware":
            return render_template('malware.html')
        else:
            return render_template('safe.html')

    return jsonify({"error": "Invalid file"})

@app.route('/results', methods=['GET'])
def get_results():
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.execute('SELECT * FROM analysis_results')
        results = cursor.fetchall()

    return jsonify(results)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
